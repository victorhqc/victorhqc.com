name: Prepare Release

on:
    workflow_dispatch:
        inputs:
            version:
                description: "Version number (without v prefix)"
                required: true

env:
    CARGO_TERM_COLOR: always
    RUSTC_WRAPPER: sccache
    SCCACHE_CACHE_SIZE: 2G

jobs:
    prepare-release:
        name: Prepare Release
        if: github.ref == 'refs/heads/main'
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest]
                rust: [stable]
        steps:
            - uses: actions/checkout@v3

            - name: Install latest stable
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  override: true
                  components: rustfmt, clippy
                  profile: minimal
                  target: x86_64-unknown-linux-musl

            - name: Install musl tools
              run: |
                  sudo apt-get update
                  sudo apt-get install -y musl-tools

            - name: Cache dependencies
              uses: Swatinem/rust-cache@v2

            - name: Configure sccache
              run: |
                  echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
                  echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
                  echo “RUSTFLAGS=’--cfg profile=ephemeral-build’” >> $GITHUB_ENV

            - name: Run sccache-cache
              uses: mozilla-actions/sccache-action@v0.0.7
              with:
                  version: "v0.7.4"

            - uses: Swatinem/rust-cache@v2
              with:
                  workspaces: |
                      api
                      web
                      core
                      cli
                  cache-on-failure: true
                  shared-key: "rust-cache"

            - name: Install SQLX
              run: |
                  cargo install sqlx-cli --no-default-features --features sqlite

            - name: Update versions
              run: |
                  # Update version in each Cargo.toml
                  sed -i "s/^version = \".*\"/version = \"${{ github.event.inputs.version }}\"/" api/Cargo.toml
                  sed -i "s/^version = \".*\"/version = \"${{ github.event.inputs.version }}\"/" core/Cargo.toml
                  sed -i "s/^version = \".*\"/version = \"${{ github.event.inputs.version }}\"/" cli/Cargo.toml
                  sed -i "s/^version = \".*\"/version = \"${{ github.event.inputs.version }}\"/" web/Cargo.toml

            - name: Build
              run: cargo build --workspace --target x86_64-unknown-linux-musl

            - name: Create Pull Request
              uses: peter-evans/create-pull-request@v7
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  title: "Release v${{ github.event.inputs.version }}"
                  body: "Preparing release v${{ github.event.inputs.version }}"
                  branch: release/v${{ github.event.inputs.version }}
                  delete-branch: true
